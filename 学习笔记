# Redis-


 MySQL是关系型数据库，是持久化存储的，查询检索的话，会涉及到磁盘IO操作，为了提高性能，可以使用缓存技，用户首先去memcached查询数据，如果未查询到（即缓存未命中），才去MySQL中查询数据，查询到的数据会更新到缓存数据库中，提供给下次可能进行的查询。提高了数据查询方面的性能。 Redis和memcached都是缓存数据库，可以大大提升高数据量的web访问速度，Redis的value可以是string、list、set、hash、sorted set这些，功能更加强大。
  web应用中一般采用MySQL+Redis的方式，web应用每次先访问Redis，如果没有找到数据，才去访问MySQL。
  Redis是内存数据库，数据保存在内存中，访问速度快。MySQL是关系型数据库，功能强大，存储在磁盘中，数据访问速度慢。像memcached，MongoDB，Redis等，都属于No sql系列。
  
  
  
No SQL : not only SQL 泛指非关系型的数据库，
为什么需要No SQL:高并发读写；海量数据的高效率存储；高扩展性和高可用性；
 
Redis:
       支持多种键值对类型:字符串类型;列表类型;有序集合类型;散列类型;集合类型.
       应用场景:缓存;任务队列;网站访问统计;数据过期处理;分布式集群架构中的session分离.
       
安装:虚拟机Linux系统 安装yum install gcc-c++ (环境)
     利用zip上传文件到虚拟机,tar -zxvf Redis压缩包名 (解压文件)
     cd redis解压后的文件里 make (进行基本编译,没有安装GCC环境会报错)
     cd ~  (返回ROOT下)
     cp redis.conf /usr/local/redis   (拷贝redis到/usr/local/redis路径下)
     cd redis.conf
     cd bin
     ./redis-server  (前端启动redis,当前窗口不能操作其他命令,不推荐)
     ctr C  (停止当前启动)
     cd .. (返回redis目录)
     vim redis.conf ( 修改redis.conf文件)
     将daemonize no 修改成daemonize yes 
     wq 保存退出
     ./bin/reids-server ./redis.conf  (前端启动加载redis.conf文件,变成后端启动)
     进入redis客户端: ./bin/redis-cli
     当前页面不变  ps -ef | grep -i redis  (查找redis启动 redis默认占用6379端口)
     关闭redis: ./bin/redis-cli shutdown
     
     
 myeclipse 的jar包放在lib里,并且右键选中jar包并单击buil的path 添加到构建路径里.即添加到referrenced libraries里
 
 Jedis 是Redis官方首选的JAVA客户端开发包, http://github.com/xetorthio/jedis
example: public class JedisDemo{
          
	  //单实例连接方式
	  
	  public void demo1(){
	    //设置IP地址和端口
	    Jedis jedis = new Jedis("127.0.0.1",6379);
	    //保存数据
	    jedis.set("name","imooc");
	    //获取数据
	   String value =  jedis.get("name");
	   System.out.printil(value);
	   //释放资源
	   jedis.close();
        }
	
     //连接池连接方式
     public void demo2(){
        //获得连接池连接配置对象
         JedisPoolConfig config = new JedisPoolConfig();
	 //设置最大连接数
	 config.setMaxTotal(30);
	 //设置最大空闲连接数
	 config.setMaxIdle(10);
	 //获得连接池
	 JedisPool  =new JedisPool(config,"192.168.30.132",6379);
	 //获得核心对象
	 Jedis jedis = null ;
	 try{
	    //通过连接池获得连接
	    jedis = jedisPool.getResource();
	    //设置数据
	    jedis.set("name","imooc");
	    //获取数据
	    String value = jedis.get("name");
	    System.out.println(value);
	    }catch(Exception e ){
	          e.printStackTrace();
		  }finally{
		    //释放资源
		    if(jedis != null ){
		      jedis.close();
		      }if(jedisPool != null){
		         jedisPool.close();
			 }
		}
	     
	     
     
 Redis的数据结构:
   *字符串(String)
   字符串列表(list)
   字符串集合(set)
   有序字符串集合(sorted set)
   *哈希(hash)
   key不要太长(1024个字节)或太短
   
   存储String常用命令:赋值,取值,删除,数值增减,扩展命令.
                     set compony imooc   返回的(integer) 1 表示改变的值有几个
		     get compony  返回imooc
		     getset  compony baidu 先获取再赋值
		     del compony
		     incr num  (自加1)        1
		     decr num  (自减1)        0
		     incrby  num  2(加2)      2
		     decrby  num  4(减4)     -2
		     append num  5  (在num后拼接5)   
		                         返回(integer)2   意为2个字符
					 get num  返回值为 -25
   
 存储Hash :String Key 和String Value 的map容器
          每一个Hash可以存储4294967295个键值对
	  
 存储Hash常用命令:赋值,取值,删除,数值增减,扩展命令.
                     hset myhash age 18
		     hset myhash username rose age 21
		     hget age  返回   21
		     hget username  返回 rose
		     hget myhash  username age  返回  rose 21
		     hgetall myhash   返回  "username""rose""age""21"
		     hdel username age (删除多个属性)
		     del  myhash (删除整个集合)
		     hincr myhash age  (自加1)        22
		     hdecr myhash age  (自减1)        21
		     hincrby  myhash age  2(加2)      23
		     hdecrby  myhash age  4(减4)      19
		     hexists  myhash username  返回1即存在 0不存在
		     hlen myhash  返回的是属性个数  (integer)  2
		     hkeys myhash  返回的是所有属性的名称 "username""age"
		     hvalues myhash  返回的是所有属性的值 "rose""19"
 
 存储list常用命令:两端添加，查看列表，两端弹出，获取列表元素个数，扩展命令。
 存储list方式：
 ArrayList使用数组方式
 LinkedList使用双向向链表方式
 双向链表中增加数据
 双向链表删除数据
两端添加：
  lpush mylist a b c  从left左侧开始添加，---c--b--a---
  lpush mylist 1 2 3  从left左侧开始添加，---3--2--1----c--b--a--
  rpush mylist2 a b c  从right右侧开始添加，--a--b--c---
  rpush mylist2 1 2 3  从right右侧开始添加，--a--b--c--1--2--3---
查看链表：
  lrange mylist 0 5        输出：321cba
  lrange mylist2 0 -1      输出：abc123        -1表示到链表的最后一个
  lrange mylist2 0 -2      输出：abc12         -2表示到链表的倒数第二个
两端弹出：
  lpop mylist             从left弹出 “3”
  lpop mylist  0 -1       从left弹出 21cba
  rpop mylist             从right弹出 “3”
获取列表元素个数：
  llen mylist 
扩展命令：
  lpushx mylist x     查看链表： x21cba
  rpushx mylist2 x    查看链表： abc123x
  lrem mylist  2 3  从前面向后删除2个3
  lrem mylist -2 1  从后面向前删除2个1
  lrem mylist  0 2  删除里面的所有2 
  lset mylist 3 mm  在链表第三个位置设置角标为mm ,会出现在地4个位置上
  linsert mylist before b 11  在链表的b前面插入11
  linsert mylist after b 22  在链表的b后面插入22
  rpoplpush mylist1 mylist2 将mylist1的值右端弹出再从左边压入到mylist2中
  
  存储set：
  没有顺序的数据集合，与list不同，set中不允许出现重复的元素，可包含最大元素数量和list相同4294967295个。
 存储set常用命令：
 添加删除元素；获得集合中的元素；集合中的差集运算，集合中的交集运算；集合中的并集运算；扩展命令。
 sadd myset a b c a 1 2 3  由于不会存在重复的值 所以321abc
 srem myset 1 2              3abc
 sismember myset a           a如果是myset成员 即返回1 否则返回0
 
 集合的差集运算：
 sadd mya1 a b c 
 sadd myb1 a c 1 2 
 sdiff mya1 myb1   返回 “b”      将a1看成主表 找a1有b1没有的
 sdiff myb1 myb2   返回 ”1“ ”2“  将b1看成主表 找b1有而a1没有的
 
 集合的交集运算：
 sadd mya2 a b c
 sadd myb2 a c 1 2
 sinter mya2 myb2   返回"c""a"
 
 集合的并集运算：
 sadd mya3 a b c
 sadd myb3 a c 1 2 
 sunion mya3 myb3   返回"c""2""b""a""1"
 
 扩展命令：
 smember myset           查看集合myset的成员
 scard   myset           查看集合myset的数量
 srandmember myset       随机返回集合中的一个值
 sdiffstore my1 mya1 myb1       对mya1,myb1两个集合中做差集运算并将结果存储到my1中
 sinterstore my2 mya2 myb2      对mya2,myb2两个集合中做交集运算并将结果存储到my2中
 sunionstore my3 mya3 myb3      对mya3,myb3两个集合中做并集运算并将结果存储到my3中
 
 set使用场景：跟踪具有唯一性的信息，如客户ID，使用者IP，以及用于维护数据对象之间的关联关系。
 
 存储Sorted-Set:
     与set区别：sorted-set的每一个值都与一个分数与之相关联，Redis正式通过分数将Sorted-set集合中的值从小到大排序，
               需要指出的是在sorted-set中成员的值必须唯一，可是分数却可以不唯一；sroted-set中的成员在集合的位置是有序的。
	       主要应用于游戏排名和微博热点话题，游戏积分排行榜，构建索引数据。
     存储sorted-set 常用命令：添加元素，获得元素，删除元素，范围查询；扩展命令。

          添加元素：zadd mysort 70 zs 80 ls 90 ww
	           zadd mysort 100 zs         此时由于之前已经存在一个zs，所以只将100 重新给zs，并且返回（integer） 0 ，表示没有成员改变。
          获得元素分数：zscore  mysort zs      此时返回的值是100.
          获得成员个数：zcard mysort  
	  删除某个元素：zrem mysort zs ls
	  查询元素名称：zrange mysort 0 -1                                      获得范围从0到-1 的所有元素的名称
	  查询元素名称并带有分数并从小到大排序：zrange mysort 0 -1 withscores     获得范围从0到-1 的所有元素的名称及对应分数，并由小到大排序。
	  查询元素名称并带有分数并从大到小排序：zrevrange mysort 0 -1 withscores  获得范围从0到-1 的所有元素的名称及对应分数，并由从大到小排序。
	  按照排名的范围进行删除：zremrangebyrank mysort 0 4                     删除排名从1到5的5个元素
	  按照分数的范围进行删除：zremrangebyscore mysort 80 100                 删除分数从80到100的所有元素
	   
	  扩展命令：
	     查询元素名称以分数为范围 ： zrangebyscore mysort 0 100                                          查询分数在0到100中的所有元素名称
	     查询元素名称以分数为范围并带有分数 ： zrangebyscore mysort 0 100  withscores                     查询分数在0到100中的所有元素名称及分数
	     查询元素名称以分数为范围 ： zrangebyscore mysort 0 100                                          查询分数在0到100中的所有元素名称
	     查询元素名称以分数和排名前2位为标准：zrangebyscore mysort  0  100  withscores limit 0 2          查询分数在从0到100范围内，从小到大排列的，前两位的元素名称以及分数
	     自加：zincrby mysort 5 ls                                                                     ls的分数加5 ，返回值为计算过的分数
	     计算成员在一定范围内的个数：zcount mysort 80 90                                                 计算集合Mysort在80分到90分之间的元素个数
 Redis的keys的通用操作：
      所有Keys的查看：Keys *
      以my开头的keys查看：Keys my?
      删除：del my1 my2 my3
      判断是否存在：exists  mya1   返回值为1表示存在，反之则不存在
      重命名：rename company  newconpany(新名字）
      设置过期时间：expire newcompany 1000(1000秒）
      查看剩余时间：ttl newcompany   如果没有设置过期时间，则会返回-1
      获得成员类型：type newcompany  返回String
                   type mylist      返回list
		   type myset       返回set
		   type myhash      返回hash
		   type mysort      返回zset
Redis的持久化概念：将内存中的数据同步到硬盘上
       持久化方式：
              RDB持久化：在指定的时间之内，将内存中的数据及快照写入到磁盘。
	      AOF持久化：以日志的方式记录服务器的每一次操作，在REDIS启动之初，读取文件重新构建数据库，保证自启动之后数据的完整性
	      无持久化：通过配置，禁用Redis的持久化功能
	      同时使用RDB和AOF两种持久化功能
	      
      RDB优势：这种方式下的Redis数据库将会只有一个文件，这对于备份来说十分完美，也非常容易进行数据库文件恢复
	 缺点：数据容易丢失，在数据没有备份之前，出现故障数据无法找回，
        数据文件保存在dump.rdb
	
      AOF优势：提供三种同步策略：每秒同步，每修改同步，不同步。
              对于日志文件采用append模式,即追加，即在写入过程中，出现当机也不会破坏已有的内容；如果在本次写入的过程中，出现问题也无需担心，利用Redis -checked -AOF工具帮助我们解决数据一致性问题；
	      如果日志过大，Redis自动启动日志重写机制，以append模式不断将日志写入老的日志文件，于此同时，Redis还会创建一个文件用来记录此期间所有的修改命令被执行了，更好的保证数据的安全性；
	      AOF包含一个易于理解的文件格式，也可以用这个文件重建。
	  缺点：相同内容的数据，RDB文件会比AOF产生的文件小，
      
      
 
 

